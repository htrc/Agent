
WARNING: THIS DOCUMENT IS OUT OF DATE. WHILE IT IS PROBABLY ENTIRELY
ACCURATE SOME THINGS MIGHT HAVE BEEN TWEAKED.

This is a draft API document for the htrc agent system component. The
agent presents a restful API to the user that gives them the ability
to take actions inside the htrc architecture.

These actions are primarily oriented around launching and managing
compute algorithms against the availible texts. Compute capabilities
are still limited.

This document will use a few conventions to make describing the API easier.

1) User provided values will be curly-bracketed. 

So if a user is to provide a number to the call foo, the call will be
described as:

/foo/{number}

And an example use of foo would be /foo/120 

2) The agent path is assumed to be root. The full foo call would be:

root/foo/{number}

In use the provided agent uri will be used instead of root.

3) The request type will be specified before the call url. The content
will be described below. The provided types will be http content types. 

The foo example as a PUT, with expected
content of a string value inside some xml:

PUT root/foo/{number}

text/xml
<input>{string}</input>

4) Response type will be presented the same way that input type
is. Bracketed values will be output variables.

Adding some xml response to the above foo request.

PUT root/foo/{number}

text/xml
<input>{string}</input>

text/xml
<result>{data}</result>

5) If an input and output value both have the same name they are equal.

6) An * after an xml element indicates that the element is present
zero or more times.



********************
The API
********************

----------
Create user
----------

PUT root/agent/{user}

text/xml
<credentials>
  <x509certificate>{x509}</x509certificate>
  <privatekey>{privateKey}</privatekey>
</credentials>

text/xml
<agentID>{user}</agentID>

-----

This call is used to create an agent to act on behalf of the user. It
must be made before any other API calls are used, and the agentID must
be used with all other calls.

----------
List availible algorithms
----------

GET root/agent/{agentId}/algorithm/list

text/xml
<availibleAlgorithms>
  <algorithm>{algName}</algorithm>*
</availibleAlgorithms>

-----

List all the algorithms availible to the user. The list is pulled from
the registry.

----------
List availible collections
----------

GET root/agent/{agentId}/collection/list

text/xml
<collections>
  <collection>{collectionName}</collection>*
</collection>

-----

List all collections availible to the user. The list is pulled from
the registry.

----------
Run algorithm
----------

GET root/agent/{agentId}/algorithm/run/{algName}/{colName}/{args}

text/xml
<algStatus>
  <date>{date}</date>
  <algId>{algId}</algId>
  <status>Prestart</status>
</algStatus>

-----

Runs an algorithm on behalf of the user. The return value is not the
result of the algorithm. It is the first status information about the
execution. The AlgorithmStatus type currently provides a date,
algorithm Id, and a string status (Prestart here).

----------
Poll algorithm
----------

GET root/agent/{agentId}/algorithm/poll/{algId}

text/xml
<algStatus>
  <date>{date}</date>
  <algId>{algId}</algId>
  <status>{status}</status>
</algStatus>

-----

Returns the most recent status information for the polled algorithm.

----------
List agent algorithms
----------

GET root/agent/{agentId}/algorithm/poll

text/xml
<algorithms>
  {algStatus}*
</algorithms>

-----

The algStatus variable is an AlgorithmStatus just like the one
returned by polling a specific algorithm.

----------
Algorithm output
----------

GET root/agent/{agentId}/algorithm/{algId}/result/{resultRequest}

The resultRequest variable can be one of three options:
console/stdout
console/stderr
file/{filename}

text/xml
<algorithm>
  <id>{algId}</id>
  <{resultType}>{result}</{resultType}>
</algorithm>

The resultType variable will be determined by the item requested. It will be:
stdout
stderr
file

-----

This will return one of the three possible result types for an
algorithm. Requesting stdout or stderr will provide a string
representing one of the two. The file output will assume a text file
and provide its contents as a string.

